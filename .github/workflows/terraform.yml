name: Terraform MSK Pipeline

on:
  push:
    branches:
      - main
    paths:
      - '**/*.tf'
      - '.github/workflows/terraform.yml'
  pull_request:
    paths:
      - '**/*.tf'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      tf_action:
        description: Terraform action to run
        type: choice
        options:
          - validate
          - apply
          - destroy
        default: validate

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  TERRAFORM_VERSION: 1.6.6
  TF_WORKING_DIR: .
  PLAN_FILE: plan.out
  TF_VARS_FILE: ci.auto.tfvars
  TF_BACKEND_FILE: backend.auto.tfbackend
  AWS_REGION: ap-south-1
  INFRA_SUMMARY_BUCKET: test-raw-bucket
  INFRA_SUMMARY_KEY: terraform/cluster/resources.json

jobs:
  validate:
    name: Validate configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' || vars.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_ROLE_ARN || vars.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION != '' && secrets.AWS_REGION || (vars.AWS_REGION != '' && vars.AWS_REGION) || env.AWS_REGION }}

      - name: Materialize tfvars from secret
        if: ${{ secrets.TERRAFORM_TFVARS != '' }}
        run: |
          cat <<'VARS' > "${{ env.TF_VARS_FILE }}"
          ${{ secrets.TERRAFORM_TFVARS }}
          VARS

      - name: Materialize backend config from secrets/vars
        if: ${{ secrets.TF_BACKEND_CONFIG != '' || vars.TF_BACKEND_CONFIG != '' }}
        run: |
          cat <<'BACKEND' > "${{ env.TF_BACKEND_FILE }}"
          ${{ secrets.TF_BACKEND_CONFIG != '' && secrets.TF_BACKEND_CONFIG || vars.TF_BACKEND_CONFIG }}
          BACKEND

      - name: Terraform fmt
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} fmt -check -recursive

      - name: Terraform init
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade -input=false

      - name: Terraform validate
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate

      - name: Terraform plan
        run: |
          if [ -f "${{ env.TF_VARS_FILE }}" ]; then
            terraform -chdir=${{ env.TF_WORKING_DIR }} plan -input=false -out="${{ env.PLAN_FILE }}" -var-file="${{ env.TF_VARS_FILE }}"
          else
            terraform -chdir=${{ env.TF_WORKING_DIR }} plan -input=false -out="${{ env.PLAN_FILE }}"
          fi


      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.PLAN_FILE }}

  terraform-init:
    name: Terraform initialization check
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' || vars.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_ROLE_ARN || vars.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION != '' && secrets.AWS_REGION || (vars.AWS_REGION != '' && vars.AWS_REGION) || env.AWS_REGION }}

      - name: Materialize tfvars from secret
        if: ${{ secrets.TERRAFORM_TFVARS != '' }}
        run: |
          cat <<'VARS' > "${{ env.TF_VARS_FILE }}"
          ${{ secrets.TERRAFORM_TFVARS }}
          VARS

      - name: Materialize backend config from secrets/vars
        if: ${{ secrets.TF_BACKEND_CONFIG != '' || vars.TF_BACKEND_CONFIG != '' }}
        run: |
          cat <<'BACKEND' > "${{ env.TF_BACKEND_FILE }}"
          ${{ secrets.TF_BACKEND_CONFIG != '' && secrets.TF_BACKEND_CONFIG || vars.TF_BACKEND_CONFIG }}
          BACKEND

      - name: Terraform init (no upgrade)
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} init -input=false

  apply:
    name: Apply infrastructure
    runs-on: ubuntu-latest
    needs:
      - validate
      - terraform-init
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tf_action == 'apply' }}
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' || vars.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_ROLE_ARN || vars.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION != '' && secrets.AWS_REGION || (vars.AWS_REGION != '' && vars.AWS_REGION) || env.AWS_REGION }}

      - name: Materialize backend config from secrets/vars
        if: ${{ secrets.TF_BACKEND_CONFIG != '' || vars.TF_BACKEND_CONFIG != '' }}
        run: |
          cat <<'BACKEND' > "${{ env.TF_BACKEND_FILE }}"
          ${{ secrets.TF_BACKEND_CONFIG != '' && secrets.TF_BACKEND_CONFIG || vars.TF_BACKEND_CONFIG }}
          BACKEND

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      - name: Terraform init
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} init -input=false

      - name: Terraform apply
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} apply -input=false -auto-approve "${{ env.PLAN_FILE }}"

      - name: Save infrastructure summary
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} output -json infrastructure_summary_json > resources.json

      - name: Upload infrastructure summary
        uses: actions/upload-artifact@v4
        with:
          name: infra-summary
          path: resources.json

      - name: Publish summary to S3
        if: ${{ env.INFRA_SUMMARY_BUCKET != '' && env.INFRA_SUMMARY_KEY != '' }}
        run: aws s3 cp resources.json "s3://${{ env.INFRA_SUMMARY_BUCKET }}/${{ env.INFRA_SUMMARY_KEY }}"

      - name: Capture outputs
        run: |
          terraform -chdir=${{ env.TF_WORKING_DIR }} output -json > terraform-outputs.json
          terraform -chdir=${{ env.TF_WORKING_DIR }} output > terraform-outputs.txt

      - name: Upload outputs artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: |
            terraform-outputs.json
            terraform-outputs.txt

  report:
    name: Report created infrastructure
    runs-on: ubuntu-latest
    needs: apply
    if: ${{ needs.apply.result == 'success' }}
    steps:
      - name: Download outputs artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: .

      - name: Publish outputs to summary
        run: |
          {
            echo '### Terraform Outputs';
            echo '';
            cat terraform-outputs.txt;
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload outputs as job artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-report
          path: |
            terraform-outputs.json
            terraform-outputs.txt

  destroy:
    name: Destroy infrastructure
    runs-on: ubuntu-latest
    needs:
      - terraform-init
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tf_action == 'destroy' }}
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' || vars.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_ROLE_ARN || vars.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION != '' && secrets.AWS_REGION || (vars.AWS_REGION != '' && vars.AWS_REGION) || env.AWS_REGION }}

      - name: Materialize tfvars from secret
        if: ${{ secrets.TERRAFORM_TFVARS != '' }}
        run: |
          cat <<'VARS' > "${{ env.TF_VARS_FILE }}"
          ${{ secrets.TERRAFORM_TFVARS }}
          VARS

      - name: Materialize backend config from secrets/vars
        if: ${{ secrets.TF_BACKEND_CONFIG != '' || vars.TF_BACKEND_CONFIG != '' }}
        run: |
          cat <<'BACKEND' > "${{ env.TF_BACKEND_FILE }}"
          ${{ secrets.TF_BACKEND_CONFIG != '' && secrets.TF_BACKEND_CONFIG || vars.TF_BACKEND_CONFIG }}
          BACKEND

      - name: Terraform init
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} init -input=false

      - name: Terraform destroy
        run: |
          if [ -f "${{ env.TF_VARS_FILE }}" ]; then
            terraform -chdir=${{ env.TF_WORKING_DIR }} destroy -auto-approve -input=false -var-file="${{ env.TF_VARS_FILE }}"
          else
            terraform -chdir=${{ env.TF_WORKING_DIR }} destroy -auto-approve -input=false
          fi

      - name: Save post-destroy summary
        run: |
          (terraform -chdir=${{ env.TF_WORKING_DIR }} output -json infrastructure_summary_json > resources.json) \
            || printf '{}' > resources.json

      - name: Publish post-destroy summary to S3
        if: ${{ env.INFRA_SUMMARY_BUCKET != '' && env.INFRA_SUMMARY_KEY != '' }}
        run: aws s3 cp resources.json "s3://${{ env.INFRA_SUMMARY_BUCKET }}/${{ env.INFRA_SUMMARY_KEY }}"
